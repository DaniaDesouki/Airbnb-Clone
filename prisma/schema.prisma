// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String           @unique
  password        String
  dateOfBirth     DateTime?
  imageId         Int?
  image           Image?           @relation(references: [id], fields: [imageId])
  phoneNumber     String?
  properties      Property[]
  rents           Rent[]
  bookingRequests BookingRequest[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Property {
  id                 Int              @id @default(autoincrement())
  category           Category
  pricePerDay        Float
  images             Image[]
  numOfRooms         Int
  details            String?
  notes              String?
  availabilityStatus Boolean
  availableFrom      DateTime?
  availableTo        DateTime?
  host               User             @relation(fields: [hostId], references: [id])
  hostId             Int
  address            Address?
  amenities          String
  rents              Rent[]
  bookingRequests    BookingRequest[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Image {
  id         Int        @id @default(autoincrement())
  path       String
  properties Property[]
  createdAt  DateTime   @default(now())
  User       User[]
}

model Rent {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  property    Property @relation(fields: [propertyId], references: [id])
  propertyId  Int
  fromDate    DateTime
  toDate      DateTime
  pricePerDay Float
  totalPrice  Float
  totalDays   Int
  status      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BookingRequest {
  id          Int                  @id @default(autoincrement())
  user        User                 @relation(fields: [userId], references: [id])
  userId      Int
  property    Property             @relation(fields: [propertyId], references: [id])
  propertyId  Int
  fromDate    DateTime
  toDate      DateTime
  requestDate DateTime             @default(now())
  status      BookingRequestStatus
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model Address {
  id         Int       @id @default(autoincrement())
  street     String
  city       String
  state      String
  zipCode    String
  country    String
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId Int?      @unique
}

enum Category {
  HOUSE
  APARTMENT
  ROOM
  MANSION
}

enum BookingRequestStatus {
  PENDING
  APPROVED
  CANCELED
  REJECTED
}
